#!/usr/bin/env python

# this script requires the following Python script on the server side
# saved with name "edit_show" in the folder where the shows will be posted
# the URL for the folder variable is below, you can modify it
# the parameters list must be: title, description, publish_date, creators, contributors
# ===============
#context.setTitle(title)
#context.setDescription(description)
#context.setCreators(creators)
#context.setContributors(contributors)
#context.setEffectiveDate(int(publish_date))
#context.unmarkCreationFlag()
#context.reindexObject()
#return context.absolute_url()
# =================

import requests
import cookielib
import sys
import os
import mutagen
import re
from dateutil import parser
import datetime
import pytz
import time

folder = 'https://declinefm.com/archives'
auth = (sys.argv[1],sys.argv[2])
path = sys.argv[3]
description = sys.argv[4]
contributors = sys.argv[5]

short_name = os.path.basename(path)
url = os.path.join(folder,short_name)
title = mutagen.File(path).get("TIT2").text
creators = mutagen.File(path).get("TPE1").text

# find date
matches = re.findall("\w+ \d\d \d\d\d\d", short_name)
assert matches, "%r does not contain a valid date in the name"%filename
mod_date = parser.parse(matches[0])
if "ftershow" in short_name:
    mod_date = mod_date + datetime.timedelta(20*3600/86400.) # eleven PM
else:
    mod_date = mod_date + datetime.timedelta(19*3600/86400.) # ten PM
timezone = pytz.timezone('US/Pacific') # eastern timezone
timestamp = int(time.mktime(mod_date.timetuple()))
# end find date

r = requests.head(url, auth=auth, verify=False)
print "Check file exists status code: %s" % r.status_code
if r.status_code == 404:
    # now upload the file
    fileobj = open(path, 'rb')
    headers = {'content-type': 'audio/mpeg'}
    print "Uploading..."
    r = requests.put(url, data=fileobj, headers=headers, auth=auth, verify=False)
    print "Upload status code: %s" % r.status_code
    assert r.status_code == 201, "error %s uploading:\n%s"%(r.status_code, r.content)

data = {
    "title" : title,
    "description" : description,
    "publish_date" : timestamp,
    "contributors" : contributors,
    "creators" : creators}

edit_show_url = os.path.join(url,"edit_show")
print "Editing metadata..."
r = requests.post(edit_show_url,
    data=data,
    auth=auth,
    verify=False)

print "Metadata edit status code: %s"%r.status_code
assert r.status_code == 200, "error %s editing metadata:\n%s"%(r.status_code, r.content)

print "URL: %s"%r.content
print "Edit URL: %s/edit"%r.content
