---
- hosts: all
  remote_user: ubuntu
  tasks:
  - name:   create studio directory
    file:   path=/home/ubuntu/Studio/{{ item }} state=directory
    with_items:
    - Recordings
    - Clips
    - Logs

  - name:    copy patchbay file
    action:  copy src=home/ubuntu/.patchbay.xml dest=./.patchbay.xml
  - name:    copy jack mixer file
    action:  copy src=home/ubuntu/.jack_mixer.xml dest=./.jack_mixer.xml
  - name:    copy ALSA asoundrc
    action:  copy src=home/ubuntu/.asoundrc dest=./.asoundrc

  - name: create QjackCtl config directory
    file: path=.config/rncbc.org state=directory
  - name: copy QjackCtl configuration
    copy: src=home/ubuntu/.config/rncbc.org/QjackCtl.conf dest=.config/rncbc.org/QjackCtl.conf

  - name: create autostart directory
    file: path=.config/autostart state=directory
  - name: create autostart files
    copy: src=home/ubuntu/.config/autostart/{{ item }}.desktop dest=.config/autostart/{{ item }}.desktop
    with_items:
    - startjack
    - startapps
    - update-notifier

  - name:     set up loading of Amazon credentials
    lineinfile: dest=/home/ubuntu/.bashrc state=present regexp="^source ~/.awscreds" line="source ~/.awscreds"
  - name:     set up Amazon access key ID
    lineinfile: dest=.awscreds mode=0600 create=yes state=present regexp="^export AWS_ACCESS_KEY_ID=" line="export AWS_ACCESS_KEY_ID={{ accesskeyid }}"
    when:     accesskeyid is defined
    notify:   redo s3cfg
  - name:     set up Amazon secret key
    lineinfile: dest=.awscreds mode=0600 create=yes state=present regexp="^export AWS_SECRET_ACCESS_KEY=" line="export AWS_SECRET_ACCESS_KEY={{ secretaccesskey }}"
    when:     secretaccesskey is defined
    notify:   redo s3cfg
  - name:     obtain access key
    shell:    . ~/.awscreds ; test -n "$AWS_ACCESS_KEY_ID" && echo $AWS_ACCESS_KEY_ID || { echo "You need to set up the Amazon access credentials with --extra-vars.  See README.md." ; false ; }
    always_run: yes
    register: aws_access_key_id
    changed_when: False
  - name:     obtain secret key
    shell:    . ~/.awscreds ; test -n "$AWS_SECRET_ACCESS_KEY" && echo $AWS_SECRET_ACCESS_KEY || { echo "You need to set up the Amazon access credentials with --extra-vars.  See README.md." ; false ; }
    always_run: yes
    register: aws_secret_access_key
    changed_when: False
  - name:     generate s3cfg file
    template: src=home/ubuntu/.s3cfg.j2 mode=0600 dest=~/.s3cfg

  handlers:
  - name:   redo s3cfg
    shell: /usr/local/bin/redos3cfg

- hosts: all
  remote_user: ubuntu
  sudo: True
  tasks:
  - name:   set hostname in configuration file
    copy:   content={{ inventory_hostname }} dest=/etc/hostname
    register: change_hostname
  - name:   set hostname in running system
    shell:  /bin/hostname {{ inventory_hostname }}
    when:   change_hostname|changed
    notify:  restart lightdm

  - name: add user to necessary groups
    user: name=ubuntu groups=adm,dialout,cdrom,floppy,audio,dip,video,plugdev,netdev,admin,nopasswdlogin

  - name:   store dpkg non-interactive selections
    action: template src=etc/dpkg-selections dest=/etc/dpkg-selections
    register: store_dpkg_selections
  - name:   set dpkg selections
    action: command /usr/bin/debconf-set-selections /etc/dpkg-selections
    when:   store_dpkg_selections|changed
  - name:   add the partner repo to apt
    apt_repository: repo="deb http://archive.canonical.com/ {{ ansible_lsb.codename }} partner"
  - name:   add latest mumble PPA
    apt_repository: repo='ppa:mumble/release'
  - name:   install necessary software
    apt:    pkg={{ item }} state=present
    with_items:
    - gstreamer0.10-pulseaudio
    - gstreamer0.10-plugins-ugly
    - gstreamer0.10-plugins-good
    - gstreamer0.10-plugins-bad
    - gstreamer0.10-nice
    - gstreamer0.10-fluendo-mp3
    - gstreamer0.10-tools
    - gstreamer-tools
    - libpulse0:i386
    - libasound2-plugins:i386
    - mumble
    - paman
    - pavucontrol
    - procps
    - curl
    - skype
    - mumble-server
    - qjackctl
    - jackd2
    - pulseaudio-module-jack
    - jamin
    - jack-mixer
    - vnc4server
    - debconf-utils
    - adobe-flashplugin
    - lightdm
    - unity-2d-shell
    - gnome-session
    - metacity
    - nautilus
    - unity-2d-panel
    - gedit
    - gnome-terminal
    - ubuntu-desktop
    - s3cmd

  - name: create scripts
    copy: src=usr/local/bin/{{ item }} dest=/usr/local/bin/{{ item }} mode=0755
    notify: restart lightdm
    with_items:
    - realtimelist
    - pawrapper
    - intro
    - outro
    - recordbroadcast
    - setup-recordbroadcast
    - mumble
    - skype
    - startjack
    - startapps
    - Xvnc

  - name: create password reset script
    copy: src=usr/local/bin/resetpassword dest=/usr/local/bin/resetpassword mode=0700

  - name: disable package list updates
    copy: src=etc/apt/apt.conf.d/99overrides dest=/etc/apt/apt.conf.d/99overrides

  - name: configure pulse
    copy: src=etc/pulse/{{ item }} dest=/etc/pulse/{{ item }}
    notify: restart lightdm
    with_items:
    - client.conf
    - daemon.conf
    - default.pa.template

  - name: relax security limits
    copy: src=etc/security/limits.conf dest=/etc/security/limits.conf
    notify: restart lightdm

  - name:    set up LightDM for VNC access
    action:  template src=etc/lightdm/lightdm.conf dest=/etc/lightdm/lightdm.conf
    notify:  restart lightdm

  - name:    change password (if requested)
    action:  command /usr/local/bin/resetpassword "{{ changepassword }}"
    when:    changepassword is defined
    notify:  restart lightdm

  handlers:
  - name:   restart lightdm
    action: service name=lightdm state=restarted enabled=yes
